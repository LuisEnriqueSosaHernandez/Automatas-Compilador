/* Generated By:JavaCC: Do not edit this line. CompiladorConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CompiladorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int si = 5;
  /** RegularExpression Id. */
  int sino = 6;
  /** RegularExpression Id. */
  int elegir = 7;
  /** RegularExpression Id. */
  int caso = 8;
  /** RegularExpression Id. */
  int salir = 9;
  /** RegularExpression Id. */
  int falta = 10;
  /** RegularExpression Id. */
  int in = 11;
  /** RegularExpression Id. */
  int ent = 12;
  /** RegularExpression Id. */
  int flot = 13;
  /** RegularExpression Id. */
  int cad = 14;
  /** RegularExpression Id. */
  int bool = 15;
  /** RegularExpression Id. */
  int mode = 16;
  /** RegularExpression Id. */
  int ls = 17;
  /** RegularExpression Id. */
  int history = 18;
  /** RegularExpression Id. */
  int ayuda = 19;
  /** RegularExpression Id. */
  int help = 20;
  /** RegularExpression Id. */
  int print = 21;
  /** RegularExpression Id. */
  int rm = 22;
  /** RegularExpression Id. */
  int function = 23;
  /** RegularExpression Id. */
  int mientras = 24;
  /** RegularExpression Id. */
  int hasta = 25;
  /** RegularExpression Id. */
  int hacer = 26;
  /** RegularExpression Id. */
  int enojo = 27;
  /** RegularExpression Id. */
  int palito = 28;
  /** RegularExpression Id. */
  int grados = 29;
  /** RegularExpression Id. */
  int admira1 = 30;
  /** RegularExpression Id. */
  int admira2 = 31;
  /** RegularExpression Id. */
  int pesos = 32;
  /** RegularExpression Id. */
  int porciento = 33;
  /** RegularExpression Id. */
  int amperson = 34;
  /** RegularExpression Id. */
  int comilla1 = 35;
  /** RegularExpression Id. */
  int abrepregunta = 36;
  /** RegularExpression Id. */
  int comilla2 = 37;
  /** RegularExpression Id. */
  int comilla3 = 38;
  /** RegularExpression Id. */
  int dospuntosarriba = 39;
  /** RegularExpression Id. */
  int culebrita = 40;
  /** RegularExpression Id. */
  int guionbajo = 41;
  /** RegularExpression Id. */
  int abreparentesis = 42;
  /** RegularExpression Id. */
  int cierraparentesis = 43;
  /** RegularExpression Id. */
  int abrellave = 44;
  /** RegularExpression Id. */
  int cierrallave = 45;
  /** RegularExpression Id. */
  int abrecorchete = 46;
  /** RegularExpression Id. */
  int cierracorchete = 47;
  /** RegularExpression Id. */
  int comillas = 48;
  /** RegularExpression Id. */
  int gatito = 49;
  /** RegularExpression Id. */
  int puntocoma = 50;
  /** RegularExpression Id. */
  int punto = 51;
  /** RegularExpression Id. */
  int coma = 52;
  /** RegularExpression Id. */
  int dospuntos = 53;
  /** RegularExpression Id. */
  int suma = 54;
  /** RegularExpression Id. */
  int resta = 55;
  /** RegularExpression Id. */
  int multiplicar = 56;
  /** RegularExpression Id. */
  int dividir = 57;
  /** RegularExpression Id. */
  int modulo = 58;
  /** RegularExpression Id. */
  int modulodos = 59;
  /** RegularExpression Id. */
  int potencia = 60;
  /** RegularExpression Id. */
  int y = 61;
  /** RegularExpression Id. */
  int o = 62;
  /** RegularExpression Id. */
  int menor = 63;
  /** RegularExpression Id. */
  int mayor = 64;
  /** RegularExpression Id. */
  int menorigual = 65;
  /** RegularExpression Id. */
  int mayorigual = 66;
  /** RegularExpression Id. */
  int igual = 67;
  /** RegularExpression Id. */
  int diferente = 68;
  /** RegularExpression Id. */
  int asignacion = 69;
  /** RegularExpression Id. */
  int asignaciondos = 70;
  /** RegularExpression Id. */
  int aumento = 71;
  /** RegularExpression Id. */
  int decremento = 72;
  /** RegularExpression Id. */
  int num = 73;
  /** RegularExpression Id. */
  int flotante = 74;
  /** RegularExpression Id. */
  int booleano = 75;
  /** RegularExpression Id. */
  int nulo = 76;
  /** RegularExpression Id. */
  int unicodeMin = 77;
  /** RegularExpression Id. */
  int unicodeMay = 78;
  /** RegularExpression Id. */
  int unicodeSimb = 79;
  /** RegularExpression Id. */
  int cadena = 80;
  /** RegularExpression Id. */
  int comentario = 81;
  /** RegularExpression Id. */
  int ident = 82;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\t\"",
    "\"\\r\"",
    "\" \"",
    "\"\\n\"",
    "<si>",
    "<sino>",
    "<elegir>",
    "<caso>",
    "<salir>",
    "<falta>",
    "<in>",
    "<ent>",
    "<flot>",
    "<cad>",
    "<bool>",
    "<mode>",
    "<ls>",
    "<history>",
    "\"?\"",
    "<help>",
    "<print>",
    "<rm>",
    "<function>",
    "<mientras>",
    "<hasta>",
    "<hacer>",
    "\"\\u00ac\"",
    "\"|\"",
    "\"\\u00b0\"",
    "\"!\"",
    "\"\\u00a1\"",
    "\"$\"",
    "\"%\"",
    "\"&\"",
    "\"\\\'\"",
    "\"\\u00bf\"",
    "\"\\u00b4\"",
    "\"`\"",
    "\"\\u00a8\"",
    "\"~\"",
    "\"_\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"\\\"\"",
    "\"#\"",
    "\";\"",
    "\".\"",
    "\",\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%%\"",
    "\"%/%\"",
    "\"^\"",
    "\"&&\"",
    "\"||\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"=\"",
    "\"<-\"",
    "\"++\"",
    "\"--\"",
    "<num>",
    "<flotante>",
    "<booleano>",
    "\"null\"",
    "<unicodeMin>",
    "<unicodeMay>",
    "<unicodeSimb>",
    "<cadena>",
    "<comentario>",
    "<ident>",
  };

}
