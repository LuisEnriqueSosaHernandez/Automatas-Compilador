/* CompiladorTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CompiladorTokenManager.java */
import java.io.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;

/** Token Manager. */
@SuppressWarnings("unused")public class CompiladorTokenManager implements CompiladorConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000000000000L) != 0L)
            return 137;
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 82;
            return 71;
         }
         if ((active0 & 0x1000000000000L) != 0L)
            return 138;
         return -1;
      case 1:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 1;
            return 71;
         }
         return -1;
      case 2:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
            return 71;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 34:
         return jjStartNfaWithStates_0(0, 48, 138);
      case 35:
         return jjStartNfaWithStates_0(0, 49, 137);
      case 36:
         return jjStopAtPos(0, 32);
      case 37:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0xc00000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 39:
         return jjStopAtPos(0, 35);
      case 40:
         return jjStopAtPos(0, 42);
      case 41:
         return jjStopAtPos(0, 43);
      case 42:
         return jjStopAtPos(0, 56);
      case 43:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 44:
         return jjStopAtPos(0, 52);
      case 45:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 46:
         return jjStopAtPos(0, 51);
      case 47:
         return jjStopAtPos(0, 57);
      case 58:
         return jjStopAtPos(0, 53);
      case 59:
         return jjStopAtPos(0, 50);
      case 60:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x42L);
      case 61:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 62:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 63:
         return jjStopAtPos(0, 19);
      case 91:
         return jjStopAtPos(0, 46);
      case 93:
         return jjStopAtPos(0, 47);
      case 94:
         return jjStopAtPos(0, 60);
      case 95:
         return jjStopAtPos(0, 41);
      case 96:
         return jjStopAtPos(0, 38);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 123:
         return jjStopAtPos(0, 44);
      case 124:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 45);
      case 126:
         return jjStopAtPos(0, 40);
      case 161:
         return jjStopAtPos(0, 31);
      case 168:
         return jjStopAtPos(0, 39);
      case 172:
         return jjStopAtPos(0, 27);
      case 176:
         return jjStopAtPos(0, 29);
      case 180:
         return jjStopAtPos(0, 37);
      case 191:
         return jjStopAtPos(0, 36);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         break;
      case 38:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 43:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 45:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 61:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L);
      case 124:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 59);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 108:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0x140a220200000000L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x140a2202L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x8000000200000000L, 0x0L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x8000000200000000L, 0x140a2202140a2202L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0x4L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x8000000000000000L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0x200000000L, 0x0L
};
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0x400000000000000L, 0x0L
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0x0L, 0x140a2202140a2202L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 137;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 138:
                  if ((0xffffff1f00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 7); }
                  else if (curChar == 37)
                     { jjCheckNAddTwoStates(48, 53); }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 41;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 7); }
                  else if (curChar == 34)
                  {
                     if (kind > 80)
                        kind = 80;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     { jjCheckNAddStates(8, 10); }
                  }
                  else if (curChar == 35)
                     { jjCheckNAddStates(11, 17); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 7); }
                  else if ((0x8000000200000000L & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                  }
                  break;
               case 137:
                  if ((0xffffff1f00000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     { jjCheckNAddStates(11, 17); }
                  }
                  else if (curChar == 37)
                     { jjCheckNAddTwoStates(64, 69); }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 58;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     { jjCheckNAddStates(11, 17); }
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 36:
                  if ((0x8000000200000000L & l) != 0L && kind > 79)
                     kind = 79;
                  break;
               case 37:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 7); }
                  break;
               case 38:
                  if ((0xffffff1f00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 7); }
                  break;
               case 39:
                  if (curChar == 45)
                     { jjCheckNAddStates(0, 7); }
                  break;
               case 40:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 38)
                     { jjCheckNAddStates(0, 7); }
                  break;
               case 42:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 7); }
                  break;
               case 46:
                  if (curChar == 34 && kind > 80)
                     kind = 80;
                  break;
               case 47:
                  if (curChar == 37)
                     { jjCheckNAddTwoStates(48, 53); }
                  break;
               case 48:
                  if (curChar == 37)
                     { jjCheckNAddStates(0, 7); }
                  break;
               case 53:
                  if (curChar == 47)
                     { jjCheckNAdd(48); }
                  break;
               case 54:
                  if (curChar == 35)
                     { jjCheckNAddStates(11, 17); }
                  break;
               case 55:
                  if ((0xffffff1f00000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(11, 17); }
                  break;
               case 56:
                  if (curChar != 45)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(11, 17); }
                  break;
               case 57:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar != 38)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(11, 17); }
                  break;
               case 59:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(11, 17); }
                  break;
               case 63:
                  if (curChar == 37)
                     { jjCheckNAddTwoStates(64, 69); }
                  break;
               case 64:
                  if (curChar != 37)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(11, 17); }
                  break;
               case 69:
                  if (curChar == 47)
                     { jjCheckNAdd(64); }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(8, 10); }
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAdd(133); }
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(134, 135); }
                  break;
               case 135:
                  if (curChar == 46)
                     { jjCheckNAdd(136); }
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  { jjCheckNAdd(136); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 138:
                  if ((0x6ffffffeeffffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 7); }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 0:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     { jjCheckNAdd(71); }
                  }
                  if (curChar == 104)
                     { jjAddStates(18, 19); }
                  else if (curChar == 102)
                     { jjAddStates(20, 22); }
                  else if (curChar == 100)
                     { jjAddStates(23, 24); }
                  else if (curChar == 98)
                     { jjAddStates(25, 26); }
                  else if (curChar == 115)
                     { jjAddStates(27, 28); }
                  else if (curChar == 105)
                     { jjAddStates(29, 31); }
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 137:
                  if ((0x6ffffffeeffffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     { jjCheckNAddStates(11, 17); }
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 1:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 101 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if (curChar == 101 && kind > 8)
                     kind = 8;
                  break;
               case 8:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if (curChar == 101 && kind > 16)
                     kind = 16;
                  break;
               case 12:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if (curChar == 115 && kind > 17)
                     kind = 17;
                  break;
               case 14:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if (curChar == 116 && kind > 21)
                     kind = 21;
                  break;
               case 19:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if (curChar == 109 && kind > 22)
                     kind = 22;
                  break;
               case 21:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if (curChar == 101 && kind > 24)
                     kind = 24;
                  break;
               case 26:
                  if (curChar == 101 && kind > 75)
                     kind = 75;
                  break;
               case 27:
                  if (curChar == 117)
                     { jjCheckNAdd(26); }
                  break;
               case 28:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 115)
                     { jjCheckNAdd(26); }
                  break;
               case 31:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 38:
                  if ((0x6ffffffeeffffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 7); }
                  break;
               case 43:
                  if (curChar == 124)
                     { jjCheckNAddStates(0, 7); }
                  break;
               case 44:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 55:
                  if ((0x6ffffffeeffffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(11, 17); }
                  break;
               case 60:
                  if (curChar != 124)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(11, 17); }
                  break;
               case 61:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 70:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  { jjCheckNAdd(71); }
                  break;
               case 71:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  { jjCheckNAdd(71); }
                  break;
               case 72:
                  if (curChar == 105)
                     { jjAddStates(29, 31); }
                  break;
               case 73:
                  if (curChar == 102 && kind > 5)
                     kind = 5;
                  break;
               case 74:
                  if (curChar == 110 && kind > 11)
                     kind = 11;
                  break;
               case 75:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if (curChar == 116 && kind > 12)
                     kind = 12;
                  break;
               case 77:
                  if (curChar == 115)
                     { jjAddStates(27, 28); }
                  break;
               case 78:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if (curChar == 104 && kind > 7)
                     kind = 7;
                  break;
               case 83:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if (curChar == 103 && kind > 14)
                     kind = 14;
                  break;
               case 88:
                  if (curChar == 98)
                     { jjAddStates(25, 26); }
                  break;
               case 89:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if (curChar == 107 && kind > 9)
                     kind = 9;
                  break;
               case 93:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 97:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 98:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if (curChar == 111 && kind > 15)
                     kind = 15;
                  break;
               case 100:
                  if (curChar == 100)
                     { jjAddStates(23, 24); }
                  break;
               case 101:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 102:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if (curChar == 116 && kind > 10)
                     kind = 10;
                  break;
               case 107:
                  if (curChar == 111 && kind > 26)
                     kind = 26;
                  break;
               case 108:
                  if (curChar == 102)
                     { jjAddStates(20, 22); }
                  break;
               case 109:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if (curChar == 116 && kind > 13)
                     kind = 13;
                  break;
               case 113:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if (curChar == 110 && kind > 23)
                     kind = 23;
                  break;
               case 120:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 121:
                  if (curChar == 114 && kind > 25)
                     kind = 25;
                  break;
               case 122:
                  if (curChar == 104)
                     { jjAddStates(18, 19); }
                  break;
               case 123:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 124:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 126:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 127:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 128:
                  if (curChar == 121 && kind > 18)
                     kind = 18;
                  break;
               case 129:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 130:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  if (curChar == 112 && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 138:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 7); }
                  if ((jjbitVec4[i2] & l2) != 0L)
                     { jjAddStates(32, 34); }
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                  }
                  if ((jjbitVec1[i2] & l2) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                  }
                  if ((jjbitVec2[i2] & l2) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     { jjCheckNAdd(71); }
                  }
                  break;
               case 137:
                  if ((jjbitVec3[i2] & l2) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     { jjCheckNAddStates(11, 17); }
                  }
                  if ((jjbitVec4[i2] & l2) != 0L)
                     { jjAddStates(35, 37); }
                  break;
               case 34:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 77)
                     kind = 77;
                  break;
               case 35:
                  if ((jjbitVec1[i2] & l2) != 0L && kind > 78)
                     kind = 78;
                  break;
               case 36:
                  if ((jjbitVec2[i2] & l2) != 0L && kind > 79)
                     kind = 79;
                  break;
               case 38:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 7); }
                  break;
               case 49:
                  if ((jjbitVec4[i2] & l2) != 0L)
                     { jjAddStates(32, 34); }
                  break;
               case 50:
                  if ((jjbitVec5[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 7); }
                  break;
               case 51:
                  if ((jjbitVec6[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 7); }
                  break;
               case 52:
                  if ((jjbitVec7[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 7); }
                  break;
               case 55:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(11, 17); }
                  break;
               case 65:
                  if ((jjbitVec4[i2] & l2) != 0L)
                     { jjAddStates(35, 37); }
                  break;
               case 66:
                  if ((jjbitVec5[i2] & l2) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(11, 17); }
                  break;
               case 67:
                  if ((jjbitVec6[i2] & l2) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(11, 17); }
                  break;
               case 68:
                  if ((jjbitVec7[i2] & l2) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(11, 17); }
                  break;
               case 70:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  { jjCheckNAdd(71); }
                  break;
               case 71:
                  if ((jjbitVec8[i2] & l2) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  { jjCheckNAdd(71); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 137 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   38, 40, 42, 44, 45, 46, 47, 49, 133, 134, 135, 55, 57, 59, 61, 62, 
   63, 65, 123, 129, 109, 113, 120, 101, 107, 89, 93, 78, 83, 73, 74, 75, 
   50, 51, 52, 66, 67, 68, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\77", null, null, null, null, null, null, null, 
"\254", "\174", "\260", "\41", "\241", "\44", "\45", "\46", "\47", "\277", "\264", 
"\140", "\250", "\176", "\137", "\50", "\51", "\173", "\175", "\133", "\135", "\42", 
"\43", "\73", "\56", "\54", "\72", "\53", "\55", "\52", "\57", "\45\45", "\45\57\45", 
"\136", "\46\46", "\174\174", "\74", "\76", "\74\75", "\76\75", "\75\75", "\41\75", 
"\75", "\74\55", "\53\53", "\55\55", null, null, null, "\156\165\154\154", null, null, 
null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CompiladorTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CompiladorTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 137; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x7ffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[137];
    private final int[] jjstateSet = new int[2 * 137];

    
    protected char curChar;
}
