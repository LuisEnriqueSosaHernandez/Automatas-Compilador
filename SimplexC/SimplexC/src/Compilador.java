/* Compilador.java */
/* Generated By:JavaCC: Do not edit this line. Compilador.java */
  import java.io.*;
  import java.lang.*;
  import java.util.*;
  import javax.swing.*;

public class Compilador implements CompiladorConstants {
  public static  FileOutputStream Token1;
  public static  DataOutputStream Token2;


        public static void main(String args[]) throws ParseException
        {
                Actualizador modelo= new Actualizador();
        Vista vista=new Vista();

        OyenteBox oye= new OyenteBox(vista, modelo);
        OyenteBotones oye2= new OyenteBotones(vista, modelo);
        vista.addEventoCounter(oye);
        vista.addEventoBotones(oye2);
        }





  public void analisisLexico(Vista v, Compilador comp)  throws ParseException
  {
                                //Análisis Léxico	
                                v.output3.appendBlue("*****INICIANDO AN\u00c1LISIS L\u00c9XICO*****\u005cn\u005ct");
                                try
                                        {comp.input(comp, v);}
                                        catch(ParseException e)
                                        {
                                         v.output3.appendRed("Error sint\u00e1ctico: "+e.getMessage());

                                        }
                                        catch(TokenMgrError e)
                                        {
                                          v.output3.appendRed("Error: Caracter no v\u00e1lido: "+e.getMessage());

                                        }
        }

        public void analisisSintactico(Vista v, Compilador comp)throws ParseException
        {
        //Análisis Síntáctico	
                                v.output.appendBlue("\u005cn\u005ct*****INICIANDO AN\u00c1LISIS SINT\u00c1CTICO*****\u005cn\u005ct");
                                v.numErr=0;
                                v.errores="";
                                try
                                        {
                                        v.errores="";
                                        comp.programa(v);

                                        if(v.numErr==0)
                                        {
                                        v.output.appendGreen("\u005cn\u005crCompilaci\u00f3n Terminada con \u00c9xito");
                                        }
                                        else
                                        {
                                        v.output.appendRed("\u005cn\u005crCompilaci\u00f3n Terminada con "+v.numErr+" errores:\u005cn\u005cr");
                                        v.output.appendRed(v.errores);
                                        }


                                        System.out.println("ANALISIS SINTACTICO FINALIZADO");
                                        }
                                        catch(ParseException e)
                                        {
                                         v.output.appendRed("Error sint\u00e1ctico: "+e.getMessage());
                                        }
                                        catch(TokenMgrError e)
                                        {
                                          v.output.appendRed("Error: Caracter no v\u00e1lido: "+e.getMessage());
                                        }

        }
public void analisisSemantico(Vista v, Compilador comp)throws ParseException
        {
        //Análisis Semantico	

                                 v.output2.appendBlue("\u005cn\u005ct*****INICIANDO AN\u00c1LISIS SEM\u00c1NTICO*****\u005cn\u005ct");

                                           if(v.numErrS==0){
                                             v.output2.appendGreen("\u005crCompilaci\u00f3n Terminada con \u00c9xito\u005cn");
                                           v.output2.appendBlue("Variables declaradas "+VerificacionToken.mostrar()+"\u005cn");
                                        JOptionPane.showMessageDialog(v, "Compilaci\u00f3n exitosa", "No encontramos ning\u00fan problema" , JOptionPane.INFORMATION_MESSAGE);

                                        }
                                        else
                                        {
                                      v.output2.appendRed("\u005cn\u005crCompilaci\u00f3n Terminada con "+v.numErrS+" errores:\u005cn\u005cr");
                                        v.output2.appendBlue("Variables declaradas "+VerificacionToken.mostrar()+"\u005cn");
                                          v.output2.appendRed(v.erroresS);
                                        }


                                        System.out.println("ANALISIS SEMANTICO FINALIZADO");



        }


  public static void cerrar()
  {
    try
    {
      Token1.close();
    }
    catch (IOException Ex)
    {
      System.out.println("No se cerro el archivo corectamente");
    }
   }

  final public void input(Compilador analiza, Vista v) throws ParseException {String mensaje;
    label_1:
    while (true) {
      mensaje = revisarTokens();
//analiza.archtoken_escribe(mensaje);
       v.output3.append(mensaje+"\u005cn");
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case si:
      case sino:
      case elegir:
      case caso:
      case salir:
      case falta:
      case ent:
      case largo:
      case flot:
      case doble:
      case cad:
      case bool:
      case print:
      case leer:
      case function:
      case mientras:
      case hasta:
      case hacer:
      case inicio:
      case fin:
      case enojo:
      case palito:
      case grados:
      case admira1:
      case admira2:
      case pesos:
      case amperson:
      case comilla1:
      case abrepregunta:
      case comilla2:
      case comilla3:
      case dospuntosarriba:
      case culebrita:
      case guionbajo:
      case gato:
      case abreparentesis:
      case cierraparentesis:
      case abrellave:
      case cierrallave:
      case abrecorchete:
      case cierracorchete:
      case comillas:
      case gatito:
      case puntocoma:
      case punto:
      case coma:
      case dospuntos:
      case suma:
      case resta:
      case multiplicar:
      case dividir:
      case modulo:
      case potencia:
      case y:
      case o:
      case menor:
      case mayor:
      case menorigual:
      case mayorigual:
      case igual:
      case diferente:
      case asignacion:
      case aumento:
      case decremento:
      case num:
      case flotante:
      case booleano:
      case nulo:
      case cadena:
      case comentario:
      case ident:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  final public String revisarTokens() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case si:{
      //CONDICIONALES
      
      t = jj_consume_token(si);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada if" );}
      break;
      }
    case sino:{
      t = jj_consume_token(sino);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada else");}
      break;
      }
    case elegir:{
      t = jj_consume_token(elegir);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada switch");}
      break;
      }
    case caso:{
      t = jj_consume_token(caso);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada case");}
      break;
      }
    case salir:{
      t = jj_consume_token(salir);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada break");}
      break;
      }
    case falta:{
      t = jj_consume_token(falta);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada default");}
      break;
      }
    case ent:{
      t = jj_consume_token(ent);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada int");}
      break;
      }
    case largo:{
      t = jj_consume_token(largo);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada long");}
      break;
      }
    case flot:{
      t = jj_consume_token(flot);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada float");}
      break;
      }
    case doble:{
      t = jj_consume_token(doble);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada double");}
      break;
      }
    case cad:{
      t = jj_consume_token(cad);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct Palabra reservada string");}
      break;
      }
    case bool:{
      t = jj_consume_token(bool);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada booleano");}
      break;
      }
    case print:{
      t = jj_consume_token(print);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada print");}
      break;
      }
    case function:{
      t = jj_consume_token(function);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada function");}
      break;
      }
    case leer:{
      t = jj_consume_token(leer);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada scanf");}
      break;
      }
    case mientras:{
      t = jj_consume_token(mientras);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada while");}
      break;
      }
    case hasta:{
      t = jj_consume_token(hasta);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada for");}
      break;
      }
    case hacer:{
      t = jj_consume_token(hacer);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada hacer");}
      break;
      }
    case inicio:{
      t = jj_consume_token(inicio);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada inicio");}
      break;
      }
    case fin:{
      t = jj_consume_token(fin);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada fin");}
      break;
      }
    case abreparentesis:{
      t = jj_consume_token(abreparentesis);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Delimitador (");}
      break;
      }
    case cierraparentesis:{
      t = jj_consume_token(cierraparentesis);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Delimitador )");}
      break;
      }
    case abrellave:{
      t = jj_consume_token(abrellave);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Delimitador {");}
      break;
      }
    case cierrallave:{
      t = jj_consume_token(cierrallave);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Delimitador }");}
      break;
      }
    case abrecorchete:{
      t = jj_consume_token(abrecorchete);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Delimitador [");}
      break;
      }
    case cierracorchete:{
      t = jj_consume_token(cierracorchete);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Delimitador ]");}
      break;
      }
    case comillas:{
      t = jj_consume_token(comillas);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Delimitador \u005c" ");}
      break;
      }
    case gatito:{
      t = jj_consume_token(gatito);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Delimitador #");}
      break;
      }
    case puntocoma:{
      t = jj_consume_token(puntocoma);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Delimitador ;");}
      break;
      }
    case punto:{
      t = jj_consume_token(punto);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Delimitador .");}
      break;
      }
    case coma:{
      t = jj_consume_token(coma);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Delimitador ,");}
      break;
      }
    case dospuntos:{
      t = jj_consume_token(dospuntos);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Delimitador :");}
      break;
      }
    case enojo:{
      t = jj_consume_token(enojo);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido \u00ac");}
      break;
      }
    case gato:{
      t = jj_consume_token(gato);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido #");}
      break;
      }
    case palito:{
      t = jj_consume_token(palito);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido |");}
      break;
      }
    case grados:{
      t = jj_consume_token(grados);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido \u00b0");}
      break;
      }
    case admira1:{
      t = jj_consume_token(admira1);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido !");}
      break;
      }
    case admira2:{
      t = jj_consume_token(admira2);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido \u00a1");}
      break;
      }
    case pesos:{
      t = jj_consume_token(pesos);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido $");}
      break;
      }
    case amperson:{
      t = jj_consume_token(amperson);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido &");}
      break;
      }
    case comilla1:{
      t = jj_consume_token(comilla1);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido '");}
      break;
      }
    case abrepregunta:{
      t = jj_consume_token(abrepregunta);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido \u00bf");}
      break;
      }
    case comilla2:{
      t = jj_consume_token(comilla2);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido \u00b4");}
      break;
      }
    case comilla3:{
      t = jj_consume_token(comilla3);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido `");}
      break;
      }
    case dospuntosarriba:{
      t = jj_consume_token(dospuntosarriba);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido \u00a8");}
      break;
      }
    case culebrita:{
      t = jj_consume_token(culebrita);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido ~");}
      break;
      }
    case guionbajo:{
      t = jj_consume_token(guionbajo);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Caracter no valido _");}
      break;
      }
    case suma:{
      t = jj_consume_token(suma);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador aritmetico SUMA +");}
      break;
      }
    case resta:{
      t = jj_consume_token(resta);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador aritmetico RESTA -");}
      break;
      }
    case multiplicar:{
      t = jj_consume_token(multiplicar);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador aritmetico PRODUCTO *");}
      break;
      }
    case dividir:{
      t = jj_consume_token(dividir);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador aritmetico COCIENTE /");}
      break;
      }
    case modulo:{
      t = jj_consume_token(modulo);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador aritmetico RESIDUO %");}
      break;
      }
    case potencia:{
      t = jj_consume_token(potencia);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador aritmetico POTENCIA ^");}
      break;
      }
    case y:{
      t = jj_consume_token(y);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador logico AND &");}
      break;
      }
    case o:{
      t = jj_consume_token(o);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador logico OR ||");}
      break;
      }
    case menor:{
      t = jj_consume_token(menor);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador comparativo <");}
      break;
      }
    case mayor:{
      t = jj_consume_token(mayor);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador comparativo >");}
      break;
      }
    case menorigual:{
      t = jj_consume_token(menorigual);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador comparativo <=");}
      break;
      }
    case mayorigual:{
      t = jj_consume_token(mayorigual);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador comparativo >=");}
      break;
      }
    case asignacion:{
      t = jj_consume_token(asignacion);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador aritmetico =");}
      break;
      }
    case igual:{
      t = jj_consume_token(igual);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador comparativo ==");}
      break;
      }
    case diferente:{
      t = jj_consume_token(diferente);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador comparativo !=");}
      break;
      }
    case aumento:{
      t = jj_consume_token(aumento);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador aritmetico AUMENTO ++");}
      break;
      }
    case decremento:{
      t = jj_consume_token(decremento);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Operador aritmetico DECREMENTO --");}
      break;
      }
    case nulo:{
      t = jj_consume_token(nulo);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Palabra reservada Valor nulo");}
      break;
      }
    case num:{
      t = jj_consume_token(num);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Tipo de Dato ENTERO");}
      break;
      }
    case flotante:{
      t = jj_consume_token(flotante);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Tipo de Dato FLOTANTE");}
      break;
      }
    case booleano:{
      t = jj_consume_token(booleano);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Tipo de Dato BOOLEANO");}
      break;
      }
    case cadena:{
      t = jj_consume_token(cadena);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Tipo de Dato CADENA");}
      break;
      }
    case comentario:{
      t = jj_consume_token(comentario);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Comentario");}
      break;
      }
    case ident:{
      t = jj_consume_token(ident);
{if ("" != null) return ( t.image +"\u005ct\u005ct\u005ct\u005ct Identificador");}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

///////////////////////////////////////////////////////////////////////////////
///A	N	A	L	I	S	I	S		S	I	N	T	A	C	T	I	C	O
///////////////////////////////////////////////////////////////////////////////
  final public 
void programa(Vista v) throws ParseException {
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case comentario:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(comentario);
      }
      jj_consume_token(ent);
      jj_consume_token(inicio);
      jj_consume_token(abrellave);
      instrucciones(v);
      jj_consume_token(fin);
      jj_consume_token(num);
      jj_consume_token(puntocoma);
      jj_consume_token(cierrallave);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case comentario:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(comentario);
      }
      jj_consume_token(0);
    } catch (ParseException e) {
v.numErr++;
                v.errores=v.errores+"\u005cnError sint\u00e1ctico: Error al crear estructura el fichero\u005cn\u005cr"+e.getMessage();
                Token t;
                do
                {
                t=getNextToken();
                }while(
                //t.kind !=fin  && 
                t.kind != EOF);
    }
  }

  final public void instrucciones(Vista v) throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case si:
      case elegir:
      case ent:
      case largo:
      case flot:
      case doble:
      case cad:
      case bool:
      case print:
      case leer:
      case function:
      case mientras:
      case hasta:
      case hacer:
      case comentario:
      case ident:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ent:
      case largo:
      case flot:
      case doble:
      case cad:
      case bool:{
        declaraciones(v);
        break;
        }
      case ident:{
        asignaciones(v);
        break;
        }
      case mientras:
      case hasta:
      case hacer:{
        ciclos(v);
        break;
        }
      case si:
      case elegir:{
        condicionales(v);
        break;
        }
      case print:
      case function:{
        es(v);
        break;
        }
      case comentario:{
        comentarios();
        break;
        }
      case leer:{
        scan(v);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//Arreglos
  final public void arreglo() throws ParseException {
    jj_consume_token(abrecorchete);
    dato();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case coma:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      jj_consume_token(coma);
      dato();
    }
    jj_consume_token(cierracorchete);
  }

//DECLARACIONES
  final public 
void declaraciones(Vista v) throws ParseException {System.out.println("Declaro");
Token img;
    try {
      declara();
      img = jj_consume_token(ident);
      jj_consume_token(asignacion);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case abreparentesis:
      case resta:
      case num:
      case flotante:
      case booleano:
      case nulo:
      case cadena:
      case ident:{
        operacion(v);
        break;
        }
      case abrecorchete:{
        arreglo();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(puntocoma);
VerificacionToken.InsertarDeclaracion(img.image,img.kind);
    } catch (ParseException e) {
v.numErr++;
                v.errores=v.errores+"Error sint\u00e1ctico: Error al declarar variable\u005cn\u005cr"+e.getMessage();
                Token t;
                do
                {t=getNextToken();
                }while(t.kind != EOF  && t.kind!=puntocoma &&t.kind!=asignacion  );
    }
  }

  final public void declara() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ent:{
      jj_consume_token(ent);
      break;
      }
    case largo:{
      jj_consume_token(largo);
      break;
      }
    case flot:{
      jj_consume_token(flot);
      break;
      }
    case doble:{
      jj_consume_token(doble);
      break;
      }
    case cad:{
      jj_consume_token(cad);
      break;
      }
    case bool:{
      jj_consume_token(bool);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void dato() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case num:{
      jj_consume_token(num);
      break;
      }
    case flotante:{
      jj_consume_token(flotante);
      break;
      }
    case booleano:{
      jj_consume_token(booleano);
      break;
      }
    case nulo:{
      jj_consume_token(nulo);
      break;
      }
    case cadena:{
      jj_consume_token(cadena);
      break;
      }
    case resta:{
      neg();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void neg() throws ParseException {
    jj_consume_token(resta);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case num:{
      jj_consume_token(num);
      break;
      }
    case flotante:{
      jj_consume_token(flotante);
      break;
      }
    case ident:{
      jj_consume_token(ident);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void operacion(Vista v) throws ParseException {System.out.println("Operacion realizada");
    operando(v);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case suma:
      case resta:
      case multiplicar:
      case dividir:
      case modulo:
      case potencia:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      operador();
      operando(v);
    }
  }

  final public void operador() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case suma:{
      jj_consume_token(suma);
      break;
      }
    case resta:{
      jj_consume_token(resta);
      break;
      }
    case multiplicar:{
      jj_consume_token(multiplicar);
      break;
      }
    case dividir:{
      jj_consume_token(dividir);
      break;
      }
    case modulo:{
      jj_consume_token(modulo);
      break;
      }
    case potencia:{
      jj_consume_token(potencia);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void operando(Vista v) throws ParseException {Token img;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case resta:
    case num:
    case flotante:
    case booleano:
    case nulo:
    case cadena:
    case ident:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ident:{
        img = jj_consume_token(ident);
if(!VerificacionToken.Existencia(img.image)){
          v.erroresS+="La variable '"+img.image+"' no ha sido declarada\u005cn";
          v.numErrS+=1;
            }
        break;
        }
      case resta:
      case num:
      case flotante:
      case booleano:
      case nulo:
      case cadena:{
        dato();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case abreparentesis:{
      jj_consume_token(abreparentesis);
      operacion(v);
      jj_consume_token(cierraparentesis);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void asignaciones(Vista v) throws ParseException {Token img;
    try {
      img = jj_consume_token(ident);
if(!VerificacionToken.Existencia(img.image)){
          v.erroresS+="La variable '"+img.image+"' no ha sido declarada\u005cn";
          v.numErrS+=1;
            }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case asignacion:
      case aumento:
      case decremento:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case aumento:
        case decremento:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case aumento:{
            jj_consume_token(aumento);
            break;
            }
          case decremento:{
            jj_consume_token(decremento);
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        case asignacion:{
          jj_consume_token(asignacion);
          operacion(v);
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(puntocoma);
    } catch (ParseException e) {
v.numErr++;
                v.errores=v.errores+"Error sint\u00e1ctico: Error en asignaci\u00f3n\u005cn\u005cr"+e.getMessage();
                Token t;

                do
                {t=getNextToken();
                }while(t.kind != EOF  && t.kind!=puntocoma  && t.kind!=asignacion   &&  t.kind!=aumento  &&t.kind!=decremento );
    }
  }

  final public void comentarios() throws ParseException {
    jj_consume_token(comentario);
  }

  final public void es(Vista v) throws ParseException {
    printwrite(v);
  }

  final public void printwrite(Vista v) throws ParseException {Token img;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case print:{
        jj_consume_token(print);
        jj_consume_token(abreparentesis);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ident:{
          img = jj_consume_token(ident);
if(!VerificacionToken.Existencia(img.image)){
          v.erroresS+="La variable '"+img.image+"' no ha sido declarada\u005cn";
          v.numErrS+=1;
            }
          break;
          }
        case suma:
        case resta:
        case multiplicar:
        case dividir:
        case modulo:
        case potencia:
        case cadena:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case cadena:{
            jj_consume_token(cadena);
            break;
            }
          case suma:
          case resta:
          case multiplicar:
          case dividir:
          case modulo:
          case potencia:{
            operador();
            break;
            }
          case ident:{
            img = jj_consume_token(ident);
if(!VerificacionToken.Existencia(img.image)){
          v.erroresS+="La variable '"+img.image+"' no ha sido declarada\u005cn";
          v.numErrS+=1;
            }
            jj_consume_token(suma);
            label_7:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case suma:
              case resta:
              case multiplicar:
              case dividir:
              case modulo:
              case potencia:
              case cadena:{
                ;
                break;
                }
              default:
                jj_la1[18] = jj_gen;
                break label_7;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case suma:
              case resta:
              case multiplicar:
              case dividir:
              case modulo:
              case potencia:{
                operador();
                break;
                }
              case cadena:{
                jj_consume_token(cadena);
                break;
                }
              default:
                jj_la1[19] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
            }
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        case abreparentesis:
        case num:
        case flotante:
        case booleano:
        case nulo:{
          operacion(v);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(cierraparentesis);
        jj_consume_token(puntocoma);
        break;
        }
      case function:{
        jj_consume_token(function);
        declara();
        img = jj_consume_token(ident);
VerificacionToken.InsertarDeclaracion(img.image,img.kind);
        jj_consume_token(abreparentesis);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ident:{
            ;
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            break label_8;
          }
          img = jj_consume_token(ident);
VerificacionToken.InsertarDeclaracion(img.image,img.kind);
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case coma:{
              ;
              break;
              }
            default:
              jj_la1[23] = jj_gen;
              break label_9;
            }
            jj_consume_token(coma);
            img = jj_consume_token(ident);
VerificacionToken.InsertarDeclaracion(img.image,img.kind);
          }
        }
        jj_consume_token(cierraparentesis);
        jj_consume_token(abrellave);
        instrucciones(v);
        jj_consume_token(fin);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ident:{
          jj_consume_token(ident);
          break;
          }
        case resta:
        case num:
        case flotante:
        case booleano:
        case nulo:
        case cadena:{
          dato();
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(puntocoma);
        jj_consume_token(cierrallave);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
v.numErr++;
                v.errores=v.errores+"Error sint\u00e1ctico: Error en instrucci\u00f3n de salida\u005cn\u005cr" +e.getMessage();
                Token t;

                do
                {t=getNextToken();
                }while(t.kind != EOF && t.kind!=puntocoma&&t.kind!=ident);
    }
  }

/*void palabra():
{}
{
		(<mode>|<ls>|<history>|<help>|<print>|<rm>|<function>
		|<si>|<sino>|<elegir>|<caso>|<salir>|<falta>|<in>|<mientras>|<hasta>|<suma>|<resta>
		|<multiplicar>|<dividir>|<modulo>|<modulodos>|<potencia>|<y>|<o>|<menor>|<mayor>
		|<menorigual>|<mayorigual>|<igual>|<diferente>|<asignacion>|<asignaciondos>
		|<aumento>|<decremento>|<gatito>)
}*/

/*void concatenar():
{}
{
	(dato()|<ident>) (<suma> (dato()|<ident>))*
}*/
  final public 
void scan(Vista v) throws ParseException {Token img;
    try {
      jj_consume_token(leer);
      jj_consume_token(abreparentesis);
      declara();
      jj_consume_token(coma);
      img = jj_consume_token(ident);
if(!VerificacionToken.Existencia(img.image)){
          v.erroresS+="La variable '"+img.image+"' no ha sido declarada\u005cn";
          v.numErrS+=1;
            }
      jj_consume_token(cierraparentesis);
      jj_consume_token(puntocoma);
    } catch (ParseException e) {
v.numErr++;
                v.errores=v.errores+"Error sint\u00c3\u00a1ctico: Error en instrucci\u00c3\u00b3n de entrada\u005cn\u005cr" +e.getMessage();
                Token t;

                do
                {t=getNextToken();
                }while(t.kind != EOF  && t.kind!=puntocoma && t.kind!=cierraparentesis  && t.kind!=ident && t.kind!=coma && t.kind!=abreparentesis&&t.kind!=comillas);
    }
  }

/*void tipodato():
{}
{
<ent>
|<flot>
|<car>
|<cad>
|<bool>
}*/
  final public 
void condicionales(Vista v) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case si:{
      ifelse(v);
      break;
      }
    case elegir:{
      switchh(v);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ifelse(Vista v) throws ParseException {
    try {
      jj_consume_token(si);
      jj_consume_token(abreparentesis);
      condicion(v);
      jj_consume_token(cierraparentesis);
      jj_consume_token(abrellave);
      instrucciones(v);
      jj_consume_token(cierrallave);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case sino:{
        jj_consume_token(sino);
        jj_consume_token(abrellave);
        instrucciones(v);
        jj_consume_token(cierrallave);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } catch (ParseException e) {
v.numErr++;
                v.errores=v.errores+"Error sint\u00e1ctico: Error en condicional if-else\u005cn\u005cr" +e.getMessage();
                Token t;

                do
                {t=getNextToken();

            }while(t.kind != EOF && t.kind!=cierrallave && t.kind!=abrellave && t.kind!=sino && t.kind!=cierrallave && t.kind!=abrellave && t.kind!=cierraparentesis && t.kind!=abreparentesis );
    }
  }

  final public void casos(Vista v) throws ParseException {
    label_10:
    while (true) {
      jj_consume_token(caso);
      dato();
      jj_consume_token(dospuntos);
      instrucciones(v);
      breakk();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case caso:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_10;
      }
    }
    defaultt(v);
  }

  final public void breakk() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case salir:{
      jj_consume_token(salir);
      jj_consume_token(puntocoma);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  final public void defaultt(Vista v) throws ParseException {
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case falta:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_11;
      }
      jj_consume_token(falta);
      jj_consume_token(dospuntos);
      instrucciones(v);
      breakk();
    }
  }

  final public void switchh(Vista v) throws ParseException {Token img;
    try {
      jj_consume_token(elegir);
      jj_consume_token(abreparentesis);
      img = jj_consume_token(ident);
if(!VerificacionToken.Existencia(img.image)){
          v.erroresS+="La variable '"+img.image+"' no ha sido declarada\u005cn";
          v.numErrS+=1;
            }
      jj_consume_token(cierraparentesis);
      jj_consume_token(abrellave);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case caso:{
          ;
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          break label_12;
        }
        casos(v);
      }
      jj_consume_token(cierrallave);
    } catch (ParseException e) {
v.numErr++;
                v.errores=v.errores+"Error sint\u00e1ctico: Error en condicional m\u00faltiple \u005cn\u005cr" +e.getMessage();
                Token t;

                do
                {t=getNextToken();

            }while(t.kind != EOF && t.kind!=cierrallave && t.kind!=abrellave && t.kind!=cierraparentesis && t.kind!=ident && t.kind!=abreparentesis);
    }
  }

//CONDICIONALES	
  final public 
void condicion(Vista v) throws ParseException {
    condicional(v);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case y:
      case o:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_13;
      }
      operadorlogico();
      condicional(v);
    }
  }

  final public void operadorlogico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case o:{
      jj_consume_token(o);
      break;
      }
    case y:{
      jj_consume_token(y);
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void condicional(Vista v) throws ParseException {
    comparacion(v);
  }

  final public void comparacion(Vista v) throws ParseException {
    operacion(v);
    comparador();
    operacion(v);
  }

  final public void comparador() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case menor:{
      jj_consume_token(menor);
      break;
      }
    case mayor:{
      jj_consume_token(mayor);
      break;
      }
    case menorigual:{
      jj_consume_token(menorigual);
      break;
      }
    case mayorigual:{
      jj_consume_token(mayorigual);
      break;
      }
    case igual:{
      jj_consume_token(igual);
      break;
      }
    case diferente:{
      jj_consume_token(diferente);
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//CICLOS
  final public void ciclos(Vista v) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case mientras:{
      wwhile(v);
      break;
      }
    case hacer:{
      dowhile(v);
      break;
      }
    case hasta:{
      ffor(v);
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void wwhile(Vista v) throws ParseException {
    try {
      jj_consume_token(mientras);
      jj_consume_token(abreparentesis);
      condicion(v);
      jj_consume_token(cierraparentesis);
      jj_consume_token(abrellave);
      instrucciones(v);
      jj_consume_token(cierrallave);
    } catch (ParseException e) {
v.numErr++;
                v.errores=v.errores+"Error sint\u00e1ctico: Error en ciclo while \u005cn\u005cr" +e.getMessage();
                Token t;

                do
                {t=getNextToken();

                }while(t.kind != EOF && t.kind!=cierrallave && t.kind!=abrellave && t.kind!=cierraparentesis && t.kind!=abreparentesis);
    }
  }

  final public void dowhile(Vista v) throws ParseException {
    try {
      jj_consume_token(hacer);
      jj_consume_token(abrellave);
      instrucciones(v);
      jj_consume_token(cierrallave);
      jj_consume_token(mientras);
      jj_consume_token(abreparentesis);
      condicion(v);
      jj_consume_token(cierraparentesis);
      jj_consume_token(puntocoma);
    } catch (ParseException e) {
v.numErr++;
                v.errores=v.errores+"Error sint\u00e1ctico: Error en ciclo do while \u005cn\u005cr" +e.getMessage();
                Token t;

                do
                {t=getNextToken();

                }while(t.kind != EOF && t.kind!=cierrallave && t.kind!=abrellave && t.kind!=cierraparentesis && t.kind!=abreparentesis
                 &&t.kind!=hacer);
    }
  }

  final public void ffor(Vista v) throws ParseException {Token img;
    try {
      jj_consume_token(hasta);
      jj_consume_token(abreparentesis);
      img = jj_consume_token(ident);
if(!VerificacionToken.Existencia(img.image)){
          v.erroresS+="La variable '"+img.image+"' no ha sido declarada\u005cn";
          v.numErrS+=1;
            }
      jj_consume_token(asignacion);
      jj_consume_token(num);
      jj_consume_token(puntocoma);
      img = jj_consume_token(ident);
if(!VerificacionToken.Existencia(img.image)){
          v.erroresS+="La variable '"+img.image+"' no ha sido declarada\u005cn";
          v.numErrS+=1;
            }
      comparador();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ident:{
        jj_consume_token(ident);
        break;
        }
      case num:{
        jj_consume_token(num);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(puntocoma);
      img = jj_consume_token(ident);
if(!VerificacionToken.Existencia(img.image)){
          v.erroresS+="La variable '"+img.image+"' no ha sido declarada\u005cn";
          v.numErrS+=1;
            }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case aumento:
      case decremento:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case aumento:{
          jj_consume_token(aumento);
          break;
          }
        case decremento:{
          jj_consume_token(decremento);
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case suma:
      case resta:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case suma:{
          jj_consume_token(suma);
          break;
          }
        case resta:{
          jj_consume_token(resta);
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(asignacion);
        jj_consume_token(num);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(cierraparentesis);
      jj_consume_token(abrellave);
      instrucciones(v);
      jj_consume_token(cierrallave);
    } catch (ParseException e) {
v.numErr++;
                v.errores=v.errores+"Error sint\u00e1ctico: Error en ciclo for \u005cn\u005cr" +e.getMessage();
                Token t;

                do
                {t=getNextToken();

                }while(t.kind != EOF && t.kind!=cierrallave && t.kind!=abrellave && t.kind!=cierraparentesis && t.kind!=ident
                                && t.kind!=num && t.kind!=dospuntos && t.kind!=ident && t.kind!=num && t.kind!=ident && t.kind!=abreparentesis);
    }
  }

  /** Generated Token Manager. */
  public CompiladorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffffe0,0xffffffe0,0x0,0x0,0x7ff8a0,0x7ff8a0,0x0,0x0,0x1f800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0000,0xa0,0x40,0x100,0x200,0x400,0x100,0x0,0x0,0x0,0x700000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x40000,0x201100,0x0,0x200000,0x0,0x3f00000,0x3f00000,0x200000,0x200100,0x0,0x0,0x0,0x3f00000,0x3f00000,0x3f00000,0x3f00100,0x0,0x40000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000000,0xc000000,0xf0000000,0x0,0x0,0x0,0x300000,0x300000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x71ff,0x71ff,0x2000,0x2000,0x6000,0x6000,0x0,0x51e0,0x0,0x11e0,0x4060,0x0,0x0,0x51e0,0x51e0,0x18,0x1c,0x1c,0x1000,0x1000,0x5000,0x51e0,0x4000,0x0,0x51e0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x4020,0x18,0x0,0x18,};
   }

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[79];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 79; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
